//Problem Statement

Given any node in a BST, get the in-order successor to that node. The successor is the next node in the traversal. You can assume the node is valid and exists somewhere in the tree.

//Tree Node

var node = {
    data: num,
    left: *address of node*,
    right: *address of node,
}

//Examples

            6
           / \
        4      10
       / \     / \
      2   5   8  11
     / \     / \
    1   3   7   9

if 1 is source, 2 is next. 2 is parent of 1
if 3 is source, 4 is next, 4 is parent of 2
if 6 is source, 7 is next, 7 is the left most node of the 10 subtree
//Example Notes

There are 3 scenarios (4 if you didn't assume a successor was in the tree). Successor is in the right sub tree, sucessor is the source's parent if the source is the left child of the parent, successor is the source's parent's parent if the source is the right child of it's parent. You need the root or each node needs the parent's address to deal with the parent scenarios.

//Proposed Procedure (assuming we have root)

Assumptions:
1. Node is in tree whose root is being passed.
2. There is a successor to the node being passed in the tree being passed
3. There are no duplicate entries in the tree

1. Check if node has right child.
  a. If so traverse to left most child of that subtree.
2. If node has no right child.
  a. Create a variable named parents
  b. Traverse from root to child, saving each node that is traversed in parents.
  c. Once the node is found, loop backwards through the parents array until the node at index is the left child of parent at the node at index - 1.
  d. Return the node at index - 1.

Proposed space complexity O(log n) / time complexity O(log n of a balanced tree, n of a completely unbalanced tree)

//Solution Attempt:

function nextSuccessor(root, node) {
    if(root === null || node === null) return null;

    if(node.right) {
        let currentNode = node.right;
        while(currentNode.left) currentNode = currentNode.left;
        return currentNode;
    } else if(!node.right) {
        let currentNode = root;
        let parents = [];

        while(currentNode !== node) {
            parents.push(currentNode);

            if(currentNode.data > node.data) {
                currentNode = currentNode.left;
            } else {
                currentNode = currentNode.right;
            }
        }

       for(let i = parents.length - 1; i >= 0; i--) {
           if(parent[i - 1].left === parent[i]) return parent[i - 1];
       }
    }
}

//Can this procedure be optimized?

This is the most optimal solution in terms of time but this can be done in O(1) space.

//Optimized Procedure

Assumptions:
1. Node is in tree whose root is being passed.
2. There is a successor to the node being passed in the tree being passed
3. There are no duplicate entries in the tree

1. Check if node has right child.
  a. If so traverse to left most child of that subtree.
2. If node has no right child.
  a. Create a variable current parents that is an array that holds two values and create a variable potentialSolution
  b. Create boolean variable going right
  c. Create while loop that checks if currentNode is equal to node passed
    i. Swap index 1 with index 0 of current parents
    ii. if traversing left, mark going right as false and set current node to it's left child.
    iii. if traversing right
      1. check if going right is false and if so, mark as true and put index 0 of current parents into potential solution
      2. set current node to right child
  d. Return potentialSolution

//Optimized space complexity O(1) / time complexity O(log n)

function nextSuccessor(root, node) {
    if(root === null || node === null) return null;

    if(node.right) {
        let currentNode = node.right;
        while(currentNode.left) currentNode = currentNode.left;
        return currentNode;
    } else if(!node.right) {
        let currentNode = root;
        let currentParents = [null, null];
        let potentialSolution = null;
        let goingRight = false;

        while(currentNode !== node) {
            currentParents[0] = currentParents[1];
            currentParents[1] = currentNode;

            if(currentNode.data > node.data) {
                goingRight = false;
                currentNode = currentNode.left;
            } else {
                if(!goingRight) {
                    goingRight = true;
                    potentialSolution = currentParents[0];
                }

                currentNode = currentNode.right;
            }
        }

       return potentialSolution;
    }
}

//Tests

graph:

            6
           / \
        4      10
       / \     / \
      2   5   8  11
     / \     / \
    1   3   7   9

nextSuccessor(*node with 6*, *node with 1*) = 2;
nextSuccessor(*node with 6*, *node with 3*) = 4;
nextSuccessor(*node with 6*, *node with 8*) = 9;

//Testing Notes

Works as expected. It feels awkward not having a return value for if you don't find a node...

//Proposed Procedure (assuming each node has a parent address)

//Tree Node

var node = {
    data: num,
    left: *address of node*,
    right: *address of node,
    parent: *address of node",
}

Assumptions:
1. Node is in tree whose root is being passed.
2. There is a successor to the node being passed in the tree being passed
3. There are no duplicate entries in the tree

1. Check if node has right child.
  a. If so traverse to left most child of that subtree.
2. If node has no right child.
  a. Check if node is the left child of it's parent and return parent if true. Return parent's parent if false.

Proposed space complexity O(1) / time complexity O(log n of a balanced tree, n of a completely unbalanced tree)

//Solution Attempt:

function nextSuccessor(root, node) {
    if(root === null || node === null) return null;

    if(node.right) {
        let currentNode = node;
        currentNode = currentNode.right;
        while(currentNode.left) currentNode = currentNode.left;
        return currentNode;
    } else if(!node.right) {
        let currentNode = node;

        while(parent.right === currentNode) {
            currentNode = currentNode.parent;
        }

        return currentNode.parent;
    }
}

//Tests

graph:

            6
           / \
        4      10
       / \     / \
      2   5   8  11
     / \     / \
    1   3   7   9

nextSuccessor(*node with 6*, *node with 1*) = 2;
nextSuccessor(*node with 6*, *node with 3*) = 4;
nextSuccessor(*node with 6*, *node with 8*) = 9;

//Testing Notes

Same as above.