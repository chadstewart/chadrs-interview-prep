//Problem Statement

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [a(i), b(i)] indicates that you must take course b(i) first if you want to take course a(i).

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

//Examples

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

//Example Notes

In graph terms, if you think of each course as nodes in a graph and the prequisities as edges of a graph, a failure state is if a loop is identified in the graph set up.

//Proposed Procedure

Assumption: All edges are unique

1. Check if prerequisites are equal or greater than number of courses.
2. Create prequisites object.
3. Loop through prequisites array and added courses with prerequisites to object
4. Create for loop that loops through number of courses and checks if a loop can be identified from prequisites of each course

Proposed space complexity O(n^2) / time complexity O(n * m)

//Can this procedure be optimized?

I don't think there is a more optimized solution currently but am unsure.

//Solution Attempt:

/**
 * @param {number} numCourses
 * @param {number[][]} prerequisites
 * @return {boolean}
 */
var canFinish = function(numCourses, prerequisites) {
    if(numCourses >= prerequisites.length) return false;
    let prereqTable = buildPrereqTable(numCourses, prerequisties);
    return searchForLoop(numCourses, prereqTable);
};

function buildPrereqTable(numCourses, prerequisites) {
    let coursePrereqs = Array(numCourses).fill().map(() => []);
    for(let prereq of prerequisites) {
        coursePrereqs[prereq[0]].push(prereq[1]);
    }

    return coursePrereqs;
}

function searchForLoop(numCourses, prereqTable) {
    for(let i = 0; i < numCourses; i++) {
        if(prereqTable[i].length === 0) continue;

        for(let course of prereqTable[i]) {
            let visited = {};
            let current = course;

            while(prereqTable[current].length > 0) {
                if(visited[prereqTable[current]]) return false;
                visited[current] = true;
                current = prereqTable[current][0];
            }
        }
    }

    return true;
}

//Tests

canFinish(2, [[1,0]]) = true;
canFinish(2, [[1,0], [0,1]]) = false;
canFinish(4, [[0,1], [2,1], [3, 2]]) = true;
canFinish(4, [[0,1], [2,1], [3, 2], [1, 3]]) = false;

//Testing Notes

*Any testing observations go here*
