//Problem Statement

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

//Examples

[1,2,3,4,5,7,9]
[2,3,4,6,10,12,13,15,19]

[1,2,3,4,5,6,7,9,10,13,15,19]

//Tests

input = [1,2,3], [4,5] = 3
input = [1,1], [1] = 1
input = [], [] = 0

//Proposed Procedure

1. Merge both sorted arrays into one large sorted array.
2. Take array length and divide it by 2.
3. If quotient is odd, round down and return element at quotient.
4. If quotient is even, take quotient and quotient minus 1, add both elements, divide by 2 and return that number.

Proposed space complexity O(m + n) / time complexity O(m + n)

//Can this procedure be optimized?
The space complexity can be optimized by not producing another array.

//Optimized Procedure

1. Take both array lengths, add them and divide the sum by 2.
2. Create pointers and compare both array elements at pointer.
3. If element in array 1 is less then element in array 2, shift array 1 pointer by one otherwise shift array 2 pointer by 1 and increment count
4. If array length quotient is odd, round down and return element at quotient.
5. If array length quotient is even, take quotient and quotient minus 1, add both elements, divide by 2 and return that number.

Optimized space complexity O(1) / time complexity  O(m + n)

//Solution Attempt:

*Code goes here*

//Testing Notes

*Any testing observations go here*
