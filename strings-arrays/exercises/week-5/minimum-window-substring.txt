//Problem Statement

Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

A substring is a contiguous sequence of characters within the string.

//Examples

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.

Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.

Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.

//Example Notes

Checking to see if the whole string even has the substring at all is a good start and can terminate early if not. This will come down to 

//Proposed Procedure

1. Create variable found and intialize it to ""
2. Loop through t and add to a check object
3. Loop through table starting at t.length - 1
  a. Create visited object
  b. Loop backwards and check if t is in substring and save substring if found and smaller than what is already saved, save to visited chars found in t
4. Return found substring

Proposed space complexity O(m) / time complexity O(n ^ 2)

//Solution Attempt:

/**
 * @param {string} s
 * @param {string} t
 * @return {string}
 */
var minWindow = function(s, t) {
    let result = "";
    let checkForT = makeHashMap(t);
    return minSubString(s, t, checkForT, result);
};

function makeHashMap(source) {
    let result = {};

    for(let char in source) {
        result[char] = true;
    }

    return result;
}

function minSubString(s, t, checkForT, result) {
    for(let i = t.length - 1; i < s.length; i++) {
        let seen = {};
        let counter = t.length;

        for(let j = i; j >= 0; j--) {
            if(s[j] in checkForT && !s[j] in seen) {
                counter--;
                seen[s[j]] = true;
            }

            if(counter === 0) {
                if(result === "") {
                    result = s.slice(j, i - j);
                } else {
                    let temp = s.slice(j, i - j);

                    result = temp.length < result.length ? temp : result;
                }

                break;
            }
        }
    }

    return result;

}

//Tests

minWindow("ADOBECODEBANC", "ABC") = "BANC"
minWindow("a", "a") = a;
minWindow("a", "aa") = ""

//Testing Notes

There may be some minor optimizations to this solution that can be done but it wouldn't affect the time complexity.

//Can this procedure be optimized?

According to the problem there's a way to create a O(n + m) time complexity solution but I have no idea how to do that yet.

Edit: Leetcode explains how to do to this with an optimized solution. Is pretty interesting

//Optimized Procedure:

Approach 1: Sliding Window
Intuition

The question asks us to return the minimum window from the string SS which has all the characters of the string TT. Let us call a window desirable if it has all the characters from TT.

We can use a simple sliding window approach to solve this problem.

In any sliding window based problem we have two pointers. One rightright pointer whose job is to expand the current window and then we have the leftleft pointer whose job is to contract a given window. At any point in time only one of these pointers move and the other one remains fixed.

The solution is pretty intuitive. We keep expanding the window by moving the right pointer. When the window has all the desired characters, we contract (if possible) and save the smallest window till now.

The answer is the smallest desirable window.

For eg. S = "ABAACBAB" T = "ABC". Then our answer window is "ACB" and shown below is one of the possible desirable windows.

Algorithm

We start with two pointers, leftleft and rightright initially pointing to the first element of the string SS.

We use the rightright pointer to expand the window until we get a desirable window i.e. a window that contains all of the characters of TT.

Once we have a window with all the characters, we can move the left pointer ahead one by one. If the window is still a desirable one we keep on updating the minimum window size.

If the window is not desirable any more, we repeat step \; 2step2 onwards.

Optimized space complexity O(n + m) / time complexity  O(n + m)

//Solution from online (in Java):

class Solution {
    public String minWindow(String s, String t) {

        if (s.length() == 0 || t.length() == 0) {
            return "";
        }

        Map<Character, Integer> dictT = new HashMap<Character, Integer>();

        for (int i = 0; i < t.length(); i++) {
            int count = dictT.getOrDefault(t.charAt(i), 0);
            dictT.put(t.charAt(i), count + 1);
        }

        int required = dictT.size();

        // Filter all the characters from s into a new list along with their index.
        // The filtering criteria is that the character should be present in t.
        List<Pair<Integer, Character>> filteredS = new ArrayList<Pair<Integer, Character>>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (dictT.containsKey(c)) {
                filteredS.add(new Pair<Integer, Character>(i, c));
            }
        }

        int l = 0, r = 0, formed = 0;
        Map<Character, Integer> windowCounts = new HashMap<Character, Integer>();  
        int[] ans = {-1, 0, 0};

        // Look for the characters only in the filtered list instead of entire s.
        // This helps to reduce our search.
        // Hence, we follow the sliding window approach on as small list.
        while (r < filteredS.size()) {
            char c = filteredS.get(r).getValue();
            int count = windowCounts.getOrDefault(c, 0);
            windowCounts.put(c, count + 1);

            if (dictT.containsKey(c) && windowCounts.get(c).intValue() == dictT.get(c).intValue()) {
                formed++;
            }

            // Try and contract the window till the point where it ceases to be 'desirable'.
            while (l <= r && formed == required) {
                c = filteredS.get(l).getValue();

                // Save the smallest window until now.
                int end = filteredS.get(r).getKey();
                int start = filteredS.get(l).getKey();
                if (ans[0] == -1 || end - start + 1 < ans[0]) {
                    ans[0] = end - start + 1;
                    ans[1] = start;
                    ans[2] = end;
                }

                windowCounts.put(c, windowCounts.get(c) - 1);
                if (dictT.containsKey(c) && windowCounts.get(c).intValue() < dictT.get(c).intValue()) {
                    formed--;
                }
                l++;
            }
            r++;   
        }
        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
    }
}