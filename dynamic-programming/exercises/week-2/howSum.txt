//Problem Statement

Write a function 'howSum(targetSum, numbers)' that takes in a targetSum and an array of numbers as arguments.

The function should return an array containing any combination of elements that add up to exactly the targetSum. If there is no combination that adds up to the targetSum, then return null.

Neither targetSum or numbers in the array can be negative.

If there are multiple combinations possible, you may return any single one.

//Examples

ts = 7, nums = 1,3,2,8,17,2,4, ans = [1,1,1,1,1,1,1] or [3,3,1] or [4,3] or ...

ts = 3, nums = 2,1,4, ans = [2,1] or [1,1,1]

//Example Notes

Similar to canSum in idea and structure but we have to save the answer as opposed to say whether it is true or not.

//Tests

*Tests go here*

//Proposed Procedure

1. Check if sum is 0 and return an empty array if 0
2. Check if sum is lower than 0 then return null
3. Loop through nums array
  a. Call function recursively and if it returns an array, put selected num in array
4. Return array

//Solution Attempt:

function howSum(targetSum, numbers) {
    if(targetSum === 0) return [];
    if(targetSum < 0) return null;

    for(let num of numbers) {
        let returnedArray = howSum(targetSum - num, numbers);
        if(returnedArray !== null) {
            returnedArray.push(num);
            return returnedArray;
        }
    }

    return null;
}

Proposed space complexity O(m) / time complexity O(m * n^m)

//Can this procedure be optimized?

Yes, this can be optimized because there is work being repeated unneccessarily.

//Optimized Procedure

1. Create memo object in function definition
2. Check if targetSum is in memo object
3. Check if sum is 0 and return an empty array if 0
4. Check if sum is lower than 0 then return null
5. Loop through nums array
  a. Call function recursively and if it returns an array, put selected num in array and add it to memo object
6. Return array

Optimized space complexity O(m + (h * b)) / time complexity  O(h)

//Solution Attempt:

function howSum(targetSum, numbers, memo = {}) {
    if(memo[targetSum]) return memo[targetSum];
    if(targetSum === 0) return [];
    if(targetSum < 0) return null;

    for(let num of numbers) {
        let returnedArray = howSum(targetSum - num, numbers, memo);
        if(returnedArray !== null) {
            memo[targetSum] = [...returnedArray, num];
            return memo[targetSum];
        }
    }

    memo[targetSum] = null;
    return memo[targetSum];
}

//Testing Notes

Works as intended. Quick note, the algorithm is built so that as soon as it finds an answer, it'll return it and the for loop will end. Solves the problem but is interesting to note about the algorithm.

- Note

There was a bug where I was putting the returnedArray directlyinto memo[targetSum]. It would have put the reference of the original array and just be copying the reference around as opposed to having unique arrays in the memo object. Fixed that problem.

//Alternative Solution

1. Create an array of size targetSum + 1 and fill it with null
2. Mark created array with empty array [].
3. Loop through created array
  a. If index of array is not null then loop through nums
    1. if index + num is less than or equal to array length, take array inside index, push num and put it in index + num.
4. Return created array at targetSum.

//Alternative space complexity O(m^2) / time complexity O(n * m^2)

//Solution Attempt:

function howSum(targetSum, numbers) {
    let table = Array(targetSum + 1).fill(null);
    table[0] = [];

    for(let i = 0; i < table.length; i++) {
        if(table[i] !== null) {
            for(let num of numbers) {
                if(i + num < table.length) {
                    table[i + num] = [...table[i], num];
                }
            }
        }
    }

    return table[targetSum];
}

//Testing Notes

Works as intended. Interesting note that my original idea was to simply put table[i] into table[i + num] but that would pass it by reference in JavaScript rather than just deposit the elements so you have to recreate the table and add the elements as opposed to just passing the table. Interesting JavaScript quirk